jmp program

:readInput
# read single digit into w
# set X to zero
# x += z
# x = x % 26
inp w
ret

:program
# DIGIT 1 ========
w = input

# div z 1 # z = z
z = z // 1

# add x 11 
x = (z % 26) + 11

# eql x w # x = 11 == w ? 1 : 0
# eql x 0 # x = x == 0 ? 1 : 0  NOT OPERATION
NEQL x w # x = 11 != w ? 1 : 0

# mul y 0 # y = 0 RESET Y
# add y 25 # y = 25
# SET y 25
# mul y x
# add y 1
y = 1 + 25 * x

# mul z y
z *= y

# mul y 0
# add y w
# add y 7
y = w + 7
jmp ZaddYmulX

# DIGIT X ========
w = input
x = (z % 26) + A
z = z // B (B could only be 1 or 26)
z = z * (1 + 25 if x != w else 0)
z = z + (w + c) * x

z = 0
# DIGIT 1 ========
w1 = input
x = (z % 26) + 11
z = z // 1
y = 1 + 25 * (x != w1)
z = z * y
y = w1 + 7 
z = z + y*x

# DIGIT 2 =========
w = input
x = (z % 26) + 14 
z = z // 1
y = 1 + 25 * (x != w)
mul z y
y = w + 8
z += y * x

# DIGIT 3 =========
w = input
x = (z % 26) + 10
z = z // 1
y = 1 + 25 * (x != w)
mul z y
y = w + 16
z += y * x

# DIGIT 4 =========
w = input
x = (z % 26) + 14
z = z // 1
y = 1 + 25 * (x != w)
mul z y
y = w + 8
z += y * x

# DIGIT 5 =========
w = input
x = (z % 26) - 8
z = z // 26
y = 1 + 25 * (x != w)
mul z y
y = w + 3
z += y * x

# DIGIT 6 =========
w = input
x = (z % 26) + 14
z = z // 1
y = 1 + 25 * (x != w)
mul z y
y = w + 12
z += y * x

# DIGIT 7 =========
w = input
x = (z % 26) - 11
z = z // 26
y = 1 + 25 * (x != w)
mul z y
y = w + 11
z += y * x

# DIGIT 8 =========
w = input
x = (z % 26) + 10
z = z // 1
y = 1 + 25 * (x != w)
mul z y
y = w + 8
z += y * x

# DIGIT 9 =========
w = input
x = (z % 26) - 6 
z = z // 26
y = 1 + 25 * (x != w)
mul z y
y = w + 8
z += y * x

# DIGIT 10 =========
w = input
x = (z % 26) - 9
z = z // 26
y = 1 + 25 * (x != w)
mul z y
y = w + 14
z += y * x

# DIGIT 11 =========
w = input
x = (z % 26) + 12
z = z // 1
y = 1 + 25 * (x != w)
mul z y
y = w + 4
z += y * x

# DIGIT 12 =========
w = input
x = (z % 26) - 5
z = z // 26
y = 1 + 25 * (x != w)
mul z y
y = w + 14
z += y * x

# DIGIT 13 =========
# asm
w = input
x = (z % 26) - 4
z = z // 26

y = 1 + 25 * (x != w)
z = z * y

y = w + 15
z = z + y * x

# DIGIT 14 =========
# asm
w = input
x = (z % 26) - 9
y = 1 + 25 * (x != w)
z = z // 26
z = (z * y) + (w + 16) * x